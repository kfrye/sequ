Kristina Frye
CS 300
October 29, 2013
Notes for CL1

Redmine repo: https://projects.cecs.pdx.edu/projects/masseycs300-kfrye

Compliance Level 1 spec:

   Compliance Level 1 of sequ adds the full functionality of GNU Coreutils seq.
   This includes the "--format", "--separator", "--equal-width", "--help" and
   "--version" arguments (as well as the one-character abbreviations of these),
   the increment argument, and support for floating-point numbers. The sequ
   initialization and increment arguments are now optional, as per the seq spec.
     
   The sequ "--format" specifier MAY format floating-point numbers differently
   than seq, but it MUST follow some well-described and reasonable
   floating-point formatting standard.

   Backslash-escapes in the "-s" argument string MUST be processed as in C
   printf(3).

After combining this description with the GNU Coreutils spec, we have the 
following requirements:

1. seq [option]... last: prints numbers from 1 to last in increments of 1
2. seq [option]... first last: prints numbers from first to last in increments
   of 1
3. seq [option]... first increment last: prints numbers from first to last
   using specified increments 

4. Options supported:

   4.1 -f format, --format=format
       Print all numbers using format. Format must contain exactly one of the
       printf-style floating point conversion specifications:
       (All conversion specifications have the same meaning as with 'printf')

      4.1.1: %x: hexadecimal format. Lower-case letters 

      4.1.2: %f: double in fixed-point notation. Infinity is printed as inf

      4.1.3: %g: double in either normal or exp format, whichever is more
             appropriate for the magnitude. Lower case letters

      4.1.4: %A: See 4.1.1. Use upper-case letters. 

      4.1.5: %F: See 4.1.3. Infinitity is printed as INF. 

      4.1.6: %G: See 4.1.4. Use upper case letters. 

      4.1.7: The ‘%’ may be followed by zero or more flags taken from the set
            ‘-+#0 '’, then an optional width containing one or more digits, then
            an optional precision consisting of a ‘.’ followed by zero or more 
            digits. 

         4.1.7.1: -: left justification. - overrides 0 if both are given

         4.1.7.2: +: always prints the sign +. + overrides a space if both are 
               given

         4.1.7.3: ' ': leave a blank before a positive number

         4.1.7.4: #: Convert to alternate form. Alternate form. For 'g' and 'G',
               trailing zeros are not removed. For 'f', 'F', 'g', 'G',
               the output always contains a decimal point. 

         4.1.7.5: 0: Use zero-padding

      4.1.10: format may also contain any number of ‘%%’ conversion
            specifications.
 
   4.2 -s string, --separator=string: Separate numbers with string; default is
      a newline. The output always terminates with a newline. 

      4.2.1 Backslash-escapes in the "-s" argument string MUST be processed as
            in C printf(3).` 

   4.3 -w, --equal-width: Print all numbers with the same width, by padding
      with leading zeros. first, step, and last should all use a fixed point
      decimal representation. (To have other kinds of padding, use --format).

   4.4 -h, --help: Print instructions on using the command

   4.5 -v, --version: Print the version number

November 3, 2013:

Discovered that the special formatting for Python (%x, %g, etc) is somewhat
different than the standard c printf formatting. For instance, %x is used
for hex format and %a is not available. I'm guessing that this is probably
okay since the actual formatting was not specified in the assignment spec,
but it will also mean that sequ will not produce the same output as seq,
and my spec, which was based upon c printf, will have to change.

Proceding with assignment as if the python string formatting is sufficient
for the assignment.

November 6, 2013:

Ran into some trouble with the equal-width option, particularly when
incrementing backwards.

Added a check to find the precision of each number in the loop, and using
that precision in the print loop as well as the width. I also had to add
in a flag in the get_max_length function instead of just flipping the
last and first arguments. The flip wasn't working because 3.1 to 1 should
be 3.1 2.1 1.1, but if I flip the arguments, it's 1 2 3. The decimal
points don't work right. So I have to actually count backwards in the
get_max_length loop when incrementing downwards in order to find the correct
precision.

This exercise also made me figure out how to use both the "width" and the
"precision" options with the string format. I had to switch the equal-width
printing from using %g to using %f because precision doesn't seem to work
with %g. Since I'm discovering the actual precision that should be used for
the shortest accurate string, it doesn't actually matter

November 7, 2013:

Fiddled some more to get the equal-width option working better. The width
and precision need to be correct or the output will not be right. It 
seems to be working correctly now.

Created an automated way to test sequ:

In the src/tests directory:
   -  test-list: contains arguments to be input into seq and sequ. This 
      generates files automatically named from the arguments.

   -  create-seq-files.sh. To be used as: 
      ./create-seq-files seq < test-list 
      ./create-seq-files ./sequ.py < test-list
      This generates files from seq and sequ.py, taking the arguments from
      test-list

   -  ./run-compare.sh seq ./sequ.py < test-list > test-results.txt
      This compares the test files and outputs whether each
      test passed for failed into "test-results.txt"

In some cases, the test "failed," but the failure exposed a bug in seq
instead of sequ. For example, seq -w 10 -.1 9.9 gives:
   10.0
   9.9

And sequ gives: 
   10.0
   09.9

I changed the seq output files so that the compare test will pass, but
once the create-seq-files script is run again, that update will be
lost. 

November 10, 2013:

Found some issues with some bad representations of floating point numbers.
Added a magic number to the get_max_precision function so that if a
number has a very large float representation (>= 28), then we won't use
that precision and we will truncate the number.

Also rounded current_num after it has been incremented to prevent bad
FP representations of the result. Otherwise, the last number in the loop
was not always displayed 
