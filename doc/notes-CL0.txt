Kristina Frye
CS 300
sequ - CL0 Notes
Homework 2

The 0th implementation of sequ takes two integers as arguments and
prints a sequence of numbers between them in increments of 1. Success
returns a 0. Failure returns a 1.

I'm going to need to know how to parse arguments, make sure those arguments
are integers, and print out a sequence of numbers.

_Parse Arguments_
http://docs.python.org/2/library/argparse.html has information on how
to parse command-line arguments

When argparse fails, it returns 2 instead of 1. To meet our specifications,
this needs to be overwritten. A technique for doing this using try/except is 
found in:
http://stackoverflow.com/questions/5943249/python-argparse-and-controlling-overriding-the-exit-status-code

_For/Range_
The syntax for using a for loop in Python with range can be found here:
http://docs.python.org/2/tutorial/controlflow.html 

__TESTING NOTES__

larger numbers than 100000000 run into memoryerrors on my test machine.
Will add test case to disallow numbers greater than this since it is
unlikely anyone will need sequ for a range greater than that.

The python parser accepts "1.1" as an "int", so the sequ command
will print: 1.1, 2.1, 3.1, for example, instead of disallowing or
truncating numbers. I can probably add a workaround to disallow this, but
this would complicate the code. Since the specification says SHOULD, and 
since Compliance Level 1 will accept floating point numbers, it's probably
not worth fixing.
Update to previous paragraph: Ooops! When I was testing using .1, 
I accidentally was using the seq command (seq .1 3) instead of
./sequ .1 3. That's why it was correctly handling the floats unexpectedly.
So ignore last paragraph. Leaving the incorrect note in for reference
instead of deleting it in case I run into a similar issue in the future. 

When parsing arguments, argparse returns its built-in errors. Looks like
if I want to customize the errors, I will need to subclass ArgumentParser:
http://stackoverflow.com/questions/14728376/i-want-python-argparse-to-throw-an-exception-rather-than-usage
This might be worth doing in the future, but probably isn't necessary right now.

__TESTING RESULTS__

./sequ.py test this: sequ.py: error: argument first: invalid int value: 'test'

./sequ.py 2 1: (no output)

./sequ.py -1 1:
-1
0
1

./sequ.py 1 3
1
2
3

./sequ.py 0 100000001
The range between first and last must be less than 100000000.

./sequ.py 1 1e10
usage: sequ.py [-h] first last
sequ.py: error: argument last: invalid int value: '1e10'

./sequ.py .1 3
usage: sequ.py [-h] first last
sequ.py: error: argument first: invalid int value: '.1'

